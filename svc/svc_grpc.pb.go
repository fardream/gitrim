// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: svc.proto

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GiTrim_InitRepoSync_FullMethodName           = "/gitrim.svc.GiTrim/InitRepoSync"
	GiTrim_SyncToSubRepo_FullMethodName          = "/gitrim.svc.GiTrim/SyncToSubRepo"
	GiTrim_CommitFromSubRepo_FullMethodName      = "/gitrim.svc.GiTrim/CommitFromSubRepo"
	GiTrim_CheckCommitFromSubRepo_FullMethodName = "/gitrim.svc.GiTrim/CheckCommitFromSubRepo"
)

// GiTrimClient is the client API for GiTrim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiTrimClient interface {
	// InitRepoSync setup the sync-ing between two repos
	InitRepoSync(ctx context.Context, in *InitRepoSyncRequest, opts ...grpc.CallOption) (*InitRepoSyncResponse, error)
	// SyncToSubRepo syncs from the original repo to the sub repo.
	SyncToSubRepo(ctx context.Context, in *SyncToSubRepoRequest, opts ...grpc.CallOption) (*SyncToSubRepoResponse, error)
	// CommitFromSubRepo tries to sends a commit from a sub repo to the original
	// repo.
	//
	// The commit will be rejected if:
	//   - the parent of commit is now head that is sync-ed from original repo.
	//   - the modification contained in the repo is rejected by the filter.
	//   - the commit contains gpg signatures.
	//
	// Note request cannot contain multiple commits.
	CommitFromSubRepo(ctx context.Context, in *CommitFromSubRepoRequest, opts ...grpc.CallOption) (*CommitFromSubRepoResponse, error)
	// CheckCommitFromSubRepo checks if the commit will be accepted into the
	// original repo.
	//
	// The commit will be rejected if:
	//   - the parent of commit is now head that is sync-ed from original repo.
	//   - the modification contained in the repo is rejected by the filter.
	//   - the commit contains gpg signatures.
	CheckCommitFromSubRepo(ctx context.Context, in *CheckCommitFromSubRepoRequest, opts ...grpc.CallOption) (*CheckCommitFromSubRepoResponse, error)
}

type giTrimClient struct {
	cc grpc.ClientConnInterface
}

func NewGiTrimClient(cc grpc.ClientConnInterface) GiTrimClient {
	return &giTrimClient{cc}
}

func (c *giTrimClient) InitRepoSync(ctx context.Context, in *InitRepoSyncRequest, opts ...grpc.CallOption) (*InitRepoSyncResponse, error) {
	out := new(InitRepoSyncResponse)
	err := c.cc.Invoke(ctx, GiTrim_InitRepoSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giTrimClient) SyncToSubRepo(ctx context.Context, in *SyncToSubRepoRequest, opts ...grpc.CallOption) (*SyncToSubRepoResponse, error) {
	out := new(SyncToSubRepoResponse)
	err := c.cc.Invoke(ctx, GiTrim_SyncToSubRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giTrimClient) CommitFromSubRepo(ctx context.Context, in *CommitFromSubRepoRequest, opts ...grpc.CallOption) (*CommitFromSubRepoResponse, error) {
	out := new(CommitFromSubRepoResponse)
	err := c.cc.Invoke(ctx, GiTrim_CommitFromSubRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giTrimClient) CheckCommitFromSubRepo(ctx context.Context, in *CheckCommitFromSubRepoRequest, opts ...grpc.CallOption) (*CheckCommitFromSubRepoResponse, error) {
	out := new(CheckCommitFromSubRepoResponse)
	err := c.cc.Invoke(ctx, GiTrim_CheckCommitFromSubRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiTrimServer is the server API for GiTrim service.
// All implementations must embed UnimplementedGiTrimServer
// for forward compatibility
type GiTrimServer interface {
	// InitRepoSync setup the sync-ing between two repos
	InitRepoSync(context.Context, *InitRepoSyncRequest) (*InitRepoSyncResponse, error)
	// SyncToSubRepo syncs from the original repo to the sub repo.
	SyncToSubRepo(context.Context, *SyncToSubRepoRequest) (*SyncToSubRepoResponse, error)
	// CommitFromSubRepo tries to sends a commit from a sub repo to the original
	// repo.
	//
	// The commit will be rejected if:
	//   - the parent of commit is now head that is sync-ed from original repo.
	//   - the modification contained in the repo is rejected by the filter.
	//   - the commit contains gpg signatures.
	//
	// Note request cannot contain multiple commits.
	CommitFromSubRepo(context.Context, *CommitFromSubRepoRequest) (*CommitFromSubRepoResponse, error)
	// CheckCommitFromSubRepo checks if the commit will be accepted into the
	// original repo.
	//
	// The commit will be rejected if:
	//   - the parent of commit is now head that is sync-ed from original repo.
	//   - the modification contained in the repo is rejected by the filter.
	//   - the commit contains gpg signatures.
	CheckCommitFromSubRepo(context.Context, *CheckCommitFromSubRepoRequest) (*CheckCommitFromSubRepoResponse, error)
	mustEmbedUnimplementedGiTrimServer()
}

// UnimplementedGiTrimServer must be embedded to have forward compatible implementations.
type UnimplementedGiTrimServer struct {
}

func (UnimplementedGiTrimServer) InitRepoSync(context.Context, *InitRepoSyncRequest) (*InitRepoSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitRepoSync not implemented")
}
func (UnimplementedGiTrimServer) SyncToSubRepo(context.Context, *SyncToSubRepoRequest) (*SyncToSubRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncToSubRepo not implemented")
}
func (UnimplementedGiTrimServer) CommitFromSubRepo(context.Context, *CommitFromSubRepoRequest) (*CommitFromSubRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitFromSubRepo not implemented")
}
func (UnimplementedGiTrimServer) CheckCommitFromSubRepo(context.Context, *CheckCommitFromSubRepoRequest) (*CheckCommitFromSubRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCommitFromSubRepo not implemented")
}
func (UnimplementedGiTrimServer) mustEmbedUnimplementedGiTrimServer() {}

// UnsafeGiTrimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiTrimServer will
// result in compilation errors.
type UnsafeGiTrimServer interface {
	mustEmbedUnimplementedGiTrimServer()
}

func RegisterGiTrimServer(s grpc.ServiceRegistrar, srv GiTrimServer) {
	s.RegisterService(&GiTrim_ServiceDesc, srv)
}

func _GiTrim_InitRepoSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRepoSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiTrimServer).InitRepoSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiTrim_InitRepoSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiTrimServer).InitRepoSync(ctx, req.(*InitRepoSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiTrim_SyncToSubRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncToSubRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiTrimServer).SyncToSubRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiTrim_SyncToSubRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiTrimServer).SyncToSubRepo(ctx, req.(*SyncToSubRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiTrim_CommitFromSubRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitFromSubRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiTrimServer).CommitFromSubRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiTrim_CommitFromSubRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiTrimServer).CommitFromSubRepo(ctx, req.(*CommitFromSubRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiTrim_CheckCommitFromSubRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCommitFromSubRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiTrimServer).CheckCommitFromSubRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiTrim_CheckCommitFromSubRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiTrimServer).CheckCommitFromSubRepo(ctx, req.(*CheckCommitFromSubRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GiTrim_ServiceDesc is the grpc.ServiceDesc for GiTrim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GiTrim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitrim.svc.GiTrim",
	HandlerType: (*GiTrimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitRepoSync",
			Handler:    _GiTrim_InitRepoSync_Handler,
		},
		{
			MethodName: "SyncToSubRepo",
			Handler:    _GiTrim_SyncToSubRepo_Handler,
		},
		{
			MethodName: "CommitFromSubRepo",
			Handler:    _GiTrim_CommitFromSubRepo_Handler,
		},
		{
			MethodName: "CheckCommitFromSubRepo",
			Handler:    _GiTrim_CheckCommitFromSubRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.proto",
}
