syntax = "proto3";

package gitrim.svc;

option go_package = "github.com/fardream/gitrim/svc";

// GitRepoIdentifier is a combination of [organization or user]/[repo-name] on a
// [remote_url], which uniquely identify a repo on a given server running git
// services, such as "user/repo" on "github.com".
message GitRepoIdentifier {
  string remote_name = 1;
  string owner = 2;
  string repo = 3;
}

// Filter contains the filters for a given sync-ing operation. It contains the
// raw_text and the canonical_filters which removes the comments/whitespaces and
// unsupported filters from the raw_text and lexigraphically sorted into a list
// of strings. Filter is considered changed if and only if canonical_filters are
// changed.
// Changing filter means a new repo, and the whole history of the sub repo will
// need to be rebuilt.
message Filter {
  // raw text of the filter.
  string raw_text = 1;

  // canonical_filters contained in the filter.
  repeated string canonical_filters = 2;
}

// RepoSync contains the information about sync-ing commits from a repo into a
// repo after files/trees are filtered by the provided filter.
//
// Each RepoSync contains an id, which is sha256
// hash of the following string
//
//   (from remote name)-(from owner name)-(from repo name)-(from branch)-(to
//   remote name)-(to owner name)-(to repo name)-(to branch)
message RepoSync {
  // Id of the repo sync
  string id = 1;
  // Repo of the original/unfiltered data
  GitRepoIdentifier from_repo = 11;
  // Branch to sync data from.
  string from_branch = 12;

  // Repo of the filtered data.
  GitRepoIdentifier to_repo = 21;
  // Branch of the filtered data.
  string to_branch = 22;

  // Filter for this sync
  Filter filter = 31;

  // commits in the unfiltered repo that will be considered the root commits of
  // the new repo after filtering.
  //
  // Root commits are just commits without parent commits.
  // The filter process walk the commit graph from the head of the from_branch,
  // and if it sees those commits listed here, it will stop the walk and set the
  // generated/filtered commits to zero parents - so they will become root
  // commits in the filtered repo.
  repeated string root_commits = 41;
}

// SyncStat contains the information about the sync-ing between two repos.
message SyncStat {
  string last_sync_from_commit = 1;
  repeated string from_dfs = 2;

  string last_sync_to_commit = 11;
  repeated string to_dfs = 12;

  map<string, string> from_to_to = 21;
  map<string, string> to_to_from = 22;
}

// LastSyncCommitStatus indicates the status the last sync commit compared with
// the repo on remote.
message LastSyncCommitStatus {
  enum Enum {
    // Unknown
    UNKNOWN = 0;
    // repo is empty or the branch doesn't exist
    EMPTY = 1;
    // repo on remote has more commits.
    ADVANCED = 2;
    // repo is in sync
    INSYNC = 3;
    // repo from remote has a different commit than RepoSync sees, but
    // the last sync-ed commit is not in the history of the remote.
    DIVERGED = 4;
  }
}

message SubRepoCommitsCheck {
  enum Status {
    UNKNOWN = 0;
    // the sub repo has commits and the from repo is in sync, the
    // commits also pass filter check
    CHECK_PASSED = 1;
    // from repo is not in sync with remote
    FROM_NOT_IN_SYNC = 2;
    // to repo diverges from the last sync commit
    TO_DIVERGED = 3;
    // to has no new commits, but in sync
    TO_NO_NEW_COMMITS = 4;
    // to has new commits, but those commits are rejected by filter.
    COMMITS_REJECTED = 5;
  }
}

// GiTrim
service GiTrim {
  // InitRepoSync setup the sync-ing between two repos.
  //
  // The ID of the created repo will be sha256 hash of the following string
  //
  //   (from remote name)-(from owner name)-(from repo name)-(from branch)-(to
  //   remote name)-(to owner name)-(to repo name)-(to branch)
  //
  // The operation will also generate a secret for git webhooks, the secret is
  // generated from the id + 16 byte long salt.
  rpc InitRepoSync(InitRepoSyncRequest) returns (InitRepoSyncResponse) {}

  // SyncToSubRepo syncs from the original repo to the sub repo.
  // The request can be set to force.
  rpc SyncToSubRepo(SyncToSubRepoRequest) returns (SyncToSubRepoResponse) {}

  // CommitsFromSubRepo tries to sends a series of commits from a sub repo to
  // the original repo.
  //
  // The commits will be rejected if:
  //   - the commits don't form a linear history.
  //   - the current head of from repo, once filtered, is not the immediate
  //     parent of those commits.
  //   - the modification contained is rejected by the filter.
  //   - the commits contains gpg signatures (can be turned off).
  rpc CommitsFromSubRepo(CommitsFromSubRepoRequest)
      returns (CommitsFromSubRepoResponse) {}

  // CheckRepoSyncUpToDate checks if the head of current from repo, once
  // fitlered, is contained in the history of branch.
  rpc CheckRepoSyncUpToDate(CheckRepoSyncUpToDateRequest)
      returns (CheckRepoSyncUpToDateResponse) {}

  // CheckCommitsFromSubRepo checks if the commits will be accepted into the
  // original repo.
  //
  // The commits will be rejected if:
  //   - the commits don't form a linear history.
  //   - the current head of from repo, once filtered, is not the immediate
  //     parent of those commits.
  //   - the modification contained is rejected by the filter.
  //   - the commits contains gpg signatures (can be turned off).
  rpc CheckCommitsFromSubRepo(CheckCommitsFromSubRepoRequest)
      returns (CheckCommitsFromSubRepoResponse) {}

  // GetRepoSync obtain the sync relation by the id.
  rpc GetRepoSync(GetRepoSyncRequest) returns (GetRepoSyncResponse) {}
}

message InitRepoSyncRequest {
  GitRepoIdentifier from_repo = 11;
  string from_branch = 12;

  GitRepoIdentifier to_repo = 21;
  string to_branch = 22;

  string filter = 31;

  // commits in the unfiltered repo that will be considered the root commits
  // of the new repo after filtering.
  //
  // Root commits are just commits without parent commits.
  // The filter process walk the commit graph from the head of the
  // from_branch, and if it sees those commits listed here, it will stop the
  // walk and set the generated/filtered commits to zero parents - so they
  // will become root commits in the filtered repo.
  repeated string root_commits = 41;
}

message InitRepoSyncResponse {
  string id = 1;
  string secret = 2;
}

message SyncToSubRepoRequest {
  string id = 1;
  bool force = 3;
  string override_from_branch = 4;
  string override_to_branch = 5;
}

message SyncToSubRepoResponse {
  int32 number_of_new_commits = 1;
  string original_head = 2;
  string new_head = 3;
}

message CommitsFromSubRepoRequest {
  string id = 1;
  string override_from_branch = 2;
  string override_to_branch = 3;

  // allow pgp signature removes PGP signature from the commits.
  // Note this way, the commits pushed to from repo will be sync-ed back
  // as a different commit instead of the original one.
  bool allow_pgp_signature = 4;

  bool do_push = 31;
}

message CommitsFromSubRepoResponse {
  SubRepoCommitsCheck.Status result = 1;
  LastSyncCommitStatus.Enum from_repo_status = 2;
  LastSyncCommitStatus.Enum to_repo_status = 3;

  // commits contain gpg signatures
  bool has_gpg_signatures = 11;
  // files rejected by the filter
  repeated string rejected_files = 12;

  repeated string new_commits = 21;
}

message CheckRepoSyncUpToDateRequest {
  string id = 1;
}
message CheckRepoSyncUpToDateResponse {
  LastSyncCommitStatus.Enum from_repo_status = 1;
  LastSyncCommitStatus.Enum to_repo_status = 2;
}

message CheckCommitsFromSubRepoRequest {
  string id = 1;
  string override_from_branch = 2;
  string override_to_branch = 3;

  // allow pgp signature removes PGP signature from the commits.
  // Note this way, the commits pushed to from repo will be sync-ed back
  // as a different commit instead of the original one.
  bool allow_pgp_signature = 4;
}

message CheckCommitsFromSubRepoResponse {
  SubRepoCommitsCheck.Status result = 1;
  LastSyncCommitStatus.Enum from_repo_status = 2;
  LastSyncCommitStatus.Enum to_repo_status = 3;

  // commits contain gpg signatures
  bool has_gpg_signatures = 11;
  // files rejected by the filter
  repeated string rejected_files = 12;
}

message GetRepoSyncRequest {
  string id = 1;
}

message GetRepoSyncResponse {
  RepoSync repo_sync = 1;
  string secret = 2;
  SyncStat sync_stat = 3;
}
