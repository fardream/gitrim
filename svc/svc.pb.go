// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.9
// source: svc.proto

package svc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LastSyncCommitStatus_Enum int32

const (
	// Unknown
	LastSyncCommitStatus_UNKNOWN LastSyncCommitStatus_Enum = 0
	// repo is empty or the branch doesn't exist
	LastSyncCommitStatus_EMPTY LastSyncCommitStatus_Enum = 1
	// repo on remote has more commits.
	LastSyncCommitStatus_ADVANCED LastSyncCommitStatus_Enum = 2
	// repo is in sync
	LastSyncCommitStatus_INSYNC LastSyncCommitStatus_Enum = 3
	// repo from remote has a different commit than RepoSync sees, but
	// the last sync-ed commit is not in the history of the remote.
	LastSyncCommitStatus_DIVERGED LastSyncCommitStatus_Enum = 4
)

// Enum value maps for LastSyncCommitStatus_Enum.
var (
	LastSyncCommitStatus_Enum_name = map[int32]string{
		0: "UNKNOWN",
		1: "EMPTY",
		2: "ADVANCED",
		3: "INSYNC",
		4: "DIVERGED",
	}
	LastSyncCommitStatus_Enum_value = map[string]int32{
		"UNKNOWN":  0,
		"EMPTY":    1,
		"ADVANCED": 2,
		"INSYNC":   3,
		"DIVERGED": 4,
	}
)

func (x LastSyncCommitStatus_Enum) Enum() *LastSyncCommitStatus_Enum {
	p := new(LastSyncCommitStatus_Enum)
	*p = x
	return p
}

func (x LastSyncCommitStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LastSyncCommitStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_proto_enumTypes[0].Descriptor()
}

func (LastSyncCommitStatus_Enum) Type() protoreflect.EnumType {
	return &file_svc_proto_enumTypes[0]
}

func (x LastSyncCommitStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LastSyncCommitStatus_Enum.Descriptor instead.
func (LastSyncCommitStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{4, 0}
}

type SubRepoCommitsCheck_Status int32

const (
	SubRepoCommitsCheck_UNKNOWN SubRepoCommitsCheck_Status = 0
	// the sub repo has commits and the from repo is in sync, the
	// commits also pass filter check
	SubRepoCommitsCheck_CHECK_PASSED SubRepoCommitsCheck_Status = 1
	// from repo is not in sync with remote
	SubRepoCommitsCheck_FROM_NOT_IN_SYNC SubRepoCommitsCheck_Status = 2
	// to repo diverges from the last sync commit
	SubRepoCommitsCheck_TO_DIVERGED SubRepoCommitsCheck_Status = 3
	// to has no new commits, but in sync
	SubRepoCommitsCheck_TO_NO_NEW_COMMITS SubRepoCommitsCheck_Status = 4
	// to has new commits, but those commits are rejected by filter.
	SubRepoCommitsCheck_COMMITS_REJECTED SubRepoCommitsCheck_Status = 5
)

// Enum value maps for SubRepoCommitsCheck_Status.
var (
	SubRepoCommitsCheck_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "CHECK_PASSED",
		2: "FROM_NOT_IN_SYNC",
		3: "TO_DIVERGED",
		4: "TO_NO_NEW_COMMITS",
		5: "COMMITS_REJECTED",
	}
	SubRepoCommitsCheck_Status_value = map[string]int32{
		"UNKNOWN":           0,
		"CHECK_PASSED":      1,
		"FROM_NOT_IN_SYNC":  2,
		"TO_DIVERGED":       3,
		"TO_NO_NEW_COMMITS": 4,
		"COMMITS_REJECTED":  5,
	}
)

func (x SubRepoCommitsCheck_Status) Enum() *SubRepoCommitsCheck_Status {
	p := new(SubRepoCommitsCheck_Status)
	*p = x
	return p
}

func (x SubRepoCommitsCheck_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubRepoCommitsCheck_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_proto_enumTypes[1].Descriptor()
}

func (SubRepoCommitsCheck_Status) Type() protoreflect.EnumType {
	return &file_svc_proto_enumTypes[1]
}

func (x SubRepoCommitsCheck_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubRepoCommitsCheck_Status.Descriptor instead.
func (SubRepoCommitsCheck_Status) EnumDescriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{5, 0}
}

// GitRepoIdentifier is a combination of [organization or user]/[repo-name] on a
// [remote_url], which uniquely identify a repo on a given server running git
// services, such as "user/repo" on "github.com".
type GitRepoIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteName string `protobuf:"bytes,1,opt,name=remote_name,json=remoteName,proto3" json:"remote_name,omitempty"`
	Owner      string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Repo       string `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *GitRepoIdentifier) Reset() {
	*x = GitRepoIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRepoIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRepoIdentifier) ProtoMessage() {}

func (x *GitRepoIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRepoIdentifier.ProtoReflect.Descriptor instead.
func (*GitRepoIdentifier) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{0}
}

func (x *GitRepoIdentifier) GetRemoteName() string {
	if x != nil {
		return x.RemoteName
	}
	return ""
}

func (x *GitRepoIdentifier) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GitRepoIdentifier) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

// Filter contains the filters for a given sync-ing operation. It contains the
// raw_text and the canonical_filters which removes the comments/whitespaces and
// unsupported filters from the raw_text and lexigraphically sorted into a list
// of strings. Filter is considered changed if and only if canonical_filters are
// changed.
// Changing filter means a new repo, and the whole history of the sub repo will
// need to be rebuilt.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// raw text of the filter.
	RawText string `protobuf:"bytes,1,opt,name=raw_text,json=rawText,proto3" json:"raw_text,omitempty"`
	// canonical_filters contained in the filter.
	CanonicalFilters []string `protobuf:"bytes,2,rep,name=canonical_filters,json=canonicalFilters,proto3" json:"canonical_filters,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{1}
}

func (x *Filter) GetRawText() string {
	if x != nil {
		return x.RawText
	}
	return ""
}

func (x *Filter) GetCanonicalFilters() []string {
	if x != nil {
		return x.CanonicalFilters
	}
	return nil
}

// RepoSync contains the information about sync-ing commits from a repo into a
// repo after files/trees are filtered by the provided filter.
//
// Each RepoSync contains an id, which is sha256
// hash of the following string
//
//	(from remote name)-(from owner name)-(from repo name)-(from branch)-(to
//	remote name)-(to owner name)-(to repo name)-(to branch)
type RepoSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the repo sync
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Repo of the original/unfiltered data
	FromRepo *GitRepoIdentifier `protobuf:"bytes,11,opt,name=from_repo,json=fromRepo,proto3" json:"from_repo,omitempty"`
	// Branch to sync data from.
	FromBranch string `protobuf:"bytes,12,opt,name=from_branch,json=fromBranch,proto3" json:"from_branch,omitempty"`
	// Repo of the filtered data.
	ToRepo *GitRepoIdentifier `protobuf:"bytes,21,opt,name=to_repo,json=toRepo,proto3" json:"to_repo,omitempty"`
	// Branch of the filtered data.
	ToBranch string `protobuf:"bytes,22,opt,name=to_branch,json=toBranch,proto3" json:"to_branch,omitempty"`
	// Filter for this sync
	Filter *Filter `protobuf:"bytes,31,opt,name=filter,proto3" json:"filter,omitempty"`
	// commits in the unfiltered repo that will be considered the root commits of
	// the new repo after filtering.
	//
	// Root commits are just commits without parent commits.
	// The filter process walk the commit graph from the head of the from_branch,
	// and if it sees those commits listed here, it will stop the walk and set the
	// generated/filtered commits to zero parents - so they will become root
	// commits in the filtered repo.
	RootCommits []string `protobuf:"bytes,41,rep,name=root_commits,json=rootCommits,proto3" json:"root_commits,omitempty"`
}

func (x *RepoSync) Reset() {
	*x = RepoSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoSync) ProtoMessage() {}

func (x *RepoSync) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoSync.ProtoReflect.Descriptor instead.
func (*RepoSync) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{2}
}

func (x *RepoSync) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RepoSync) GetFromRepo() *GitRepoIdentifier {
	if x != nil {
		return x.FromRepo
	}
	return nil
}

func (x *RepoSync) GetFromBranch() string {
	if x != nil {
		return x.FromBranch
	}
	return ""
}

func (x *RepoSync) GetToRepo() *GitRepoIdentifier {
	if x != nil {
		return x.ToRepo
	}
	return nil
}

func (x *RepoSync) GetToBranch() string {
	if x != nil {
		return x.ToBranch
	}
	return ""
}

func (x *RepoSync) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *RepoSync) GetRootCommits() []string {
	if x != nil {
		return x.RootCommits
	}
	return nil
}

// SyncStat contains the information about the sync-ing between two repos.
type SyncStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSyncFromCommit string            `protobuf:"bytes,1,opt,name=last_sync_from_commit,json=lastSyncFromCommit,proto3" json:"last_sync_from_commit,omitempty"`
	FromDfs            []string          `protobuf:"bytes,2,rep,name=from_dfs,json=fromDfs,proto3" json:"from_dfs,omitempty"`
	LastSyncToCommit   string            `protobuf:"bytes,11,opt,name=last_sync_to_commit,json=lastSyncToCommit,proto3" json:"last_sync_to_commit,omitempty"`
	ToDfs              []string          `protobuf:"bytes,12,rep,name=to_dfs,json=toDfs,proto3" json:"to_dfs,omitempty"`
	FromToTo           map[string]string `protobuf:"bytes,21,rep,name=from_to_to,json=fromToTo,proto3" json:"from_to_to,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ToToFrom           map[string]string `protobuf:"bytes,22,rep,name=to_to_from,json=toToFrom,proto3" json:"to_to_from,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SyncStat) Reset() {
	*x = SyncStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStat) ProtoMessage() {}

func (x *SyncStat) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStat.ProtoReflect.Descriptor instead.
func (*SyncStat) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{3}
}

func (x *SyncStat) GetLastSyncFromCommit() string {
	if x != nil {
		return x.LastSyncFromCommit
	}
	return ""
}

func (x *SyncStat) GetFromDfs() []string {
	if x != nil {
		return x.FromDfs
	}
	return nil
}

func (x *SyncStat) GetLastSyncToCommit() string {
	if x != nil {
		return x.LastSyncToCommit
	}
	return ""
}

func (x *SyncStat) GetToDfs() []string {
	if x != nil {
		return x.ToDfs
	}
	return nil
}

func (x *SyncStat) GetFromToTo() map[string]string {
	if x != nil {
		return x.FromToTo
	}
	return nil
}

func (x *SyncStat) GetToToFrom() map[string]string {
	if x != nil {
		return x.ToToFrom
	}
	return nil
}

// LastSyncCommitStatus indicates the status the last sync commit compared with
// the repo on remote.
type LastSyncCommitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LastSyncCommitStatus) Reset() {
	*x = LastSyncCommitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastSyncCommitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastSyncCommitStatus) ProtoMessage() {}

func (x *LastSyncCommitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastSyncCommitStatus.ProtoReflect.Descriptor instead.
func (*LastSyncCommitStatus) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{4}
}

type SubRepoCommitsCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubRepoCommitsCheck) Reset() {
	*x = SubRepoCommitsCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubRepoCommitsCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRepoCommitsCheck) ProtoMessage() {}

func (x *SubRepoCommitsCheck) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRepoCommitsCheck.ProtoReflect.Descriptor instead.
func (*SubRepoCommitsCheck) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{5}
}

type InitRepoSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromRepo   *GitRepoIdentifier `protobuf:"bytes,11,opt,name=from_repo,json=fromRepo,proto3" json:"from_repo,omitempty"`
	FromBranch string             `protobuf:"bytes,12,opt,name=from_branch,json=fromBranch,proto3" json:"from_branch,omitempty"`
	ToRepo     *GitRepoIdentifier `protobuf:"bytes,21,opt,name=to_repo,json=toRepo,proto3" json:"to_repo,omitempty"`
	ToBranch   string             `protobuf:"bytes,22,opt,name=to_branch,json=toBranch,proto3" json:"to_branch,omitempty"`
	Filter     string             `protobuf:"bytes,31,opt,name=filter,proto3" json:"filter,omitempty"`
	// commits in the unfiltered repo that will be considered the root commits
	// of the new repo after filtering.
	//
	// Root commits are just commits without parent commits.
	// The filter process walk the commit graph from the head of the
	// from_branch, and if it sees those commits listed here, it will stop the
	// walk and set the generated/filtered commits to zero parents - so they
	// will become root commits in the filtered repo.
	RootCommits []string `protobuf:"bytes,41,rep,name=root_commits,json=rootCommits,proto3" json:"root_commits,omitempty"`
}

func (x *InitRepoSyncRequest) Reset() {
	*x = InitRepoSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRepoSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRepoSyncRequest) ProtoMessage() {}

func (x *InitRepoSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRepoSyncRequest.ProtoReflect.Descriptor instead.
func (*InitRepoSyncRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{6}
}

func (x *InitRepoSyncRequest) GetFromRepo() *GitRepoIdentifier {
	if x != nil {
		return x.FromRepo
	}
	return nil
}

func (x *InitRepoSyncRequest) GetFromBranch() string {
	if x != nil {
		return x.FromBranch
	}
	return ""
}

func (x *InitRepoSyncRequest) GetToRepo() *GitRepoIdentifier {
	if x != nil {
		return x.ToRepo
	}
	return nil
}

func (x *InitRepoSyncRequest) GetToBranch() string {
	if x != nil {
		return x.ToBranch
	}
	return ""
}

func (x *InitRepoSyncRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *InitRepoSyncRequest) GetRootCommits() []string {
	if x != nil {
		return x.RootCommits
	}
	return nil
}

type InitRepoSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *InitRepoSyncResponse) Reset() {
	*x = InitRepoSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRepoSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRepoSyncResponse) ProtoMessage() {}

func (x *InitRepoSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRepoSyncResponse.ProtoReflect.Descriptor instead.
func (*InitRepoSyncResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{7}
}

func (x *InitRepoSyncResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InitRepoSyncResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type SyncToSubRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Force              bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	OverrideFromBranch string `protobuf:"bytes,4,opt,name=override_from_branch,json=overrideFromBranch,proto3" json:"override_from_branch,omitempty"`
	OverrideToBranch   string `protobuf:"bytes,5,opt,name=override_to_branch,json=overrideToBranch,proto3" json:"override_to_branch,omitempty"`
}

func (x *SyncToSubRepoRequest) Reset() {
	*x = SyncToSubRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncToSubRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncToSubRepoRequest) ProtoMessage() {}

func (x *SyncToSubRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncToSubRepoRequest.ProtoReflect.Descriptor instead.
func (*SyncToSubRepoRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{8}
}

func (x *SyncToSubRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncToSubRepoRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SyncToSubRepoRequest) GetOverrideFromBranch() string {
	if x != nil {
		return x.OverrideFromBranch
	}
	return ""
}

func (x *SyncToSubRepoRequest) GetOverrideToBranch() string {
	if x != nil {
		return x.OverrideToBranch
	}
	return ""
}

type SyncToSubRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfNewCommits int32  `protobuf:"varint,1,opt,name=number_of_new_commits,json=numberOfNewCommits,proto3" json:"number_of_new_commits,omitempty"`
	OriginalHead       string `protobuf:"bytes,2,opt,name=original_head,json=originalHead,proto3" json:"original_head,omitempty"`
	NewHead            string `protobuf:"bytes,3,opt,name=new_head,json=newHead,proto3" json:"new_head,omitempty"`
}

func (x *SyncToSubRepoResponse) Reset() {
	*x = SyncToSubRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncToSubRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncToSubRepoResponse) ProtoMessage() {}

func (x *SyncToSubRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncToSubRepoResponse.ProtoReflect.Descriptor instead.
func (*SyncToSubRepoResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{9}
}

func (x *SyncToSubRepoResponse) GetNumberOfNewCommits() int32 {
	if x != nil {
		return x.NumberOfNewCommits
	}
	return 0
}

func (x *SyncToSubRepoResponse) GetOriginalHead() string {
	if x != nil {
		return x.OriginalHead
	}
	return ""
}

func (x *SyncToSubRepoResponse) GetNewHead() string {
	if x != nil {
		return x.NewHead
	}
	return ""
}

type CommitsFromSubRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OverrideFromBranch string `protobuf:"bytes,2,opt,name=override_from_branch,json=overrideFromBranch,proto3" json:"override_from_branch,omitempty"`
	OverrideToBranch   string `protobuf:"bytes,3,opt,name=override_to_branch,json=overrideToBranch,proto3" json:"override_to_branch,omitempty"`
	// allow pgp signature removes PGP signature from the commits.
	// Note this way, the commits pushed to from repo will be sync-ed back
	// as a different commit instead of the original one.
	AllowPgpSignature bool `protobuf:"varint,4,opt,name=allow_pgp_signature,json=allowPgpSignature,proto3" json:"allow_pgp_signature,omitempty"`
	DoPush            bool `protobuf:"varint,31,opt,name=do_push,json=doPush,proto3" json:"do_push,omitempty"`
}

func (x *CommitsFromSubRepoRequest) Reset() {
	*x = CommitsFromSubRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitsFromSubRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitsFromSubRepoRequest) ProtoMessage() {}

func (x *CommitsFromSubRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitsFromSubRepoRequest.ProtoReflect.Descriptor instead.
func (*CommitsFromSubRepoRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{10}
}

func (x *CommitsFromSubRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommitsFromSubRepoRequest) GetOverrideFromBranch() string {
	if x != nil {
		return x.OverrideFromBranch
	}
	return ""
}

func (x *CommitsFromSubRepoRequest) GetOverrideToBranch() string {
	if x != nil {
		return x.OverrideToBranch
	}
	return ""
}

func (x *CommitsFromSubRepoRequest) GetAllowPgpSignature() bool {
	if x != nil {
		return x.AllowPgpSignature
	}
	return false
}

func (x *CommitsFromSubRepoRequest) GetDoPush() bool {
	if x != nil {
		return x.DoPush
	}
	return false
}

type CommitsFromSubRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         SubRepoCommitsCheck_Status `protobuf:"varint,1,opt,name=result,proto3,enum=gitrim.svc.SubRepoCommitsCheck_Status" json:"result,omitempty"`
	FromRepoStatus LastSyncCommitStatus_Enum  `protobuf:"varint,2,opt,name=from_repo_status,json=fromRepoStatus,proto3,enum=gitrim.svc.LastSyncCommitStatus_Enum" json:"from_repo_status,omitempty"`
	ToRepoStatus   LastSyncCommitStatus_Enum  `protobuf:"varint,3,opt,name=to_repo_status,json=toRepoStatus,proto3,enum=gitrim.svc.LastSyncCommitStatus_Enum" json:"to_repo_status,omitempty"`
	// commits contain gpg signatures
	HasGpgSignatures bool `protobuf:"varint,11,opt,name=has_gpg_signatures,json=hasGpgSignatures,proto3" json:"has_gpg_signatures,omitempty"`
	// files rejected by the filter
	RejectedFiles []string `protobuf:"bytes,12,rep,name=rejected_files,json=rejectedFiles,proto3" json:"rejected_files,omitempty"`
	NewCommits    []string `protobuf:"bytes,21,rep,name=new_commits,json=newCommits,proto3" json:"new_commits,omitempty"`
}

func (x *CommitsFromSubRepoResponse) Reset() {
	*x = CommitsFromSubRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitsFromSubRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitsFromSubRepoResponse) ProtoMessage() {}

func (x *CommitsFromSubRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitsFromSubRepoResponse.ProtoReflect.Descriptor instead.
func (*CommitsFromSubRepoResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{11}
}

func (x *CommitsFromSubRepoResponse) GetResult() SubRepoCommitsCheck_Status {
	if x != nil {
		return x.Result
	}
	return SubRepoCommitsCheck_UNKNOWN
}

func (x *CommitsFromSubRepoResponse) GetFromRepoStatus() LastSyncCommitStatus_Enum {
	if x != nil {
		return x.FromRepoStatus
	}
	return LastSyncCommitStatus_UNKNOWN
}

func (x *CommitsFromSubRepoResponse) GetToRepoStatus() LastSyncCommitStatus_Enum {
	if x != nil {
		return x.ToRepoStatus
	}
	return LastSyncCommitStatus_UNKNOWN
}

func (x *CommitsFromSubRepoResponse) GetHasGpgSignatures() bool {
	if x != nil {
		return x.HasGpgSignatures
	}
	return false
}

func (x *CommitsFromSubRepoResponse) GetRejectedFiles() []string {
	if x != nil {
		return x.RejectedFiles
	}
	return nil
}

func (x *CommitsFromSubRepoResponse) GetNewCommits() []string {
	if x != nil {
		return x.NewCommits
	}
	return nil
}

type CheckRepoSyncUpToDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CheckRepoSyncUpToDateRequest) Reset() {
	*x = CheckRepoSyncUpToDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRepoSyncUpToDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRepoSyncUpToDateRequest) ProtoMessage() {}

func (x *CheckRepoSyncUpToDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRepoSyncUpToDateRequest.ProtoReflect.Descriptor instead.
func (*CheckRepoSyncUpToDateRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{12}
}

func (x *CheckRepoSyncUpToDateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckRepoSyncUpToDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromRepoStatus LastSyncCommitStatus_Enum `protobuf:"varint,1,opt,name=from_repo_status,json=fromRepoStatus,proto3,enum=gitrim.svc.LastSyncCommitStatus_Enum" json:"from_repo_status,omitempty"`
	ToRepoStatus   LastSyncCommitStatus_Enum `protobuf:"varint,2,opt,name=to_repo_status,json=toRepoStatus,proto3,enum=gitrim.svc.LastSyncCommitStatus_Enum" json:"to_repo_status,omitempty"`
}

func (x *CheckRepoSyncUpToDateResponse) Reset() {
	*x = CheckRepoSyncUpToDateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRepoSyncUpToDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRepoSyncUpToDateResponse) ProtoMessage() {}

func (x *CheckRepoSyncUpToDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRepoSyncUpToDateResponse.ProtoReflect.Descriptor instead.
func (*CheckRepoSyncUpToDateResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{13}
}

func (x *CheckRepoSyncUpToDateResponse) GetFromRepoStatus() LastSyncCommitStatus_Enum {
	if x != nil {
		return x.FromRepoStatus
	}
	return LastSyncCommitStatus_UNKNOWN
}

func (x *CheckRepoSyncUpToDateResponse) GetToRepoStatus() LastSyncCommitStatus_Enum {
	if x != nil {
		return x.ToRepoStatus
	}
	return LastSyncCommitStatus_UNKNOWN
}

type CheckCommitsFromSubRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OverrideFromBranch string `protobuf:"bytes,2,opt,name=override_from_branch,json=overrideFromBranch,proto3" json:"override_from_branch,omitempty"`
	OverrideToBranch   string `protobuf:"bytes,3,opt,name=override_to_branch,json=overrideToBranch,proto3" json:"override_to_branch,omitempty"`
	// allow pgp signature removes PGP signature from the commits.
	// Note this way, the commits pushed to from repo will be sync-ed back
	// as a different commit instead of the original one.
	AllowPgpSignature bool `protobuf:"varint,4,opt,name=allow_pgp_signature,json=allowPgpSignature,proto3" json:"allow_pgp_signature,omitempty"`
}

func (x *CheckCommitsFromSubRepoRequest) Reset() {
	*x = CheckCommitsFromSubRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitsFromSubRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitsFromSubRepoRequest) ProtoMessage() {}

func (x *CheckCommitsFromSubRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitsFromSubRepoRequest.ProtoReflect.Descriptor instead.
func (*CheckCommitsFromSubRepoRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{14}
}

func (x *CheckCommitsFromSubRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CheckCommitsFromSubRepoRequest) GetOverrideFromBranch() string {
	if x != nil {
		return x.OverrideFromBranch
	}
	return ""
}

func (x *CheckCommitsFromSubRepoRequest) GetOverrideToBranch() string {
	if x != nil {
		return x.OverrideToBranch
	}
	return ""
}

func (x *CheckCommitsFromSubRepoRequest) GetAllowPgpSignature() bool {
	if x != nil {
		return x.AllowPgpSignature
	}
	return false
}

type CheckCommitsFromSubRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         SubRepoCommitsCheck_Status `protobuf:"varint,1,opt,name=result,proto3,enum=gitrim.svc.SubRepoCommitsCheck_Status" json:"result,omitempty"`
	FromRepoStatus LastSyncCommitStatus_Enum  `protobuf:"varint,2,opt,name=from_repo_status,json=fromRepoStatus,proto3,enum=gitrim.svc.LastSyncCommitStatus_Enum" json:"from_repo_status,omitempty"`
	ToRepoStatus   LastSyncCommitStatus_Enum  `protobuf:"varint,3,opt,name=to_repo_status,json=toRepoStatus,proto3,enum=gitrim.svc.LastSyncCommitStatus_Enum" json:"to_repo_status,omitempty"`
	// commits contain gpg signatures
	HasGpgSignatures bool `protobuf:"varint,11,opt,name=has_gpg_signatures,json=hasGpgSignatures,proto3" json:"has_gpg_signatures,omitempty"`
	// files rejected by the filter
	RejectedFiles []string `protobuf:"bytes,12,rep,name=rejected_files,json=rejectedFiles,proto3" json:"rejected_files,omitempty"`
}

func (x *CheckCommitsFromSubRepoResponse) Reset() {
	*x = CheckCommitsFromSubRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitsFromSubRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitsFromSubRepoResponse) ProtoMessage() {}

func (x *CheckCommitsFromSubRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitsFromSubRepoResponse.ProtoReflect.Descriptor instead.
func (*CheckCommitsFromSubRepoResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{15}
}

func (x *CheckCommitsFromSubRepoResponse) GetResult() SubRepoCommitsCheck_Status {
	if x != nil {
		return x.Result
	}
	return SubRepoCommitsCheck_UNKNOWN
}

func (x *CheckCommitsFromSubRepoResponse) GetFromRepoStatus() LastSyncCommitStatus_Enum {
	if x != nil {
		return x.FromRepoStatus
	}
	return LastSyncCommitStatus_UNKNOWN
}

func (x *CheckCommitsFromSubRepoResponse) GetToRepoStatus() LastSyncCommitStatus_Enum {
	if x != nil {
		return x.ToRepoStatus
	}
	return LastSyncCommitStatus_UNKNOWN
}

func (x *CheckCommitsFromSubRepoResponse) GetHasGpgSignatures() bool {
	if x != nil {
		return x.HasGpgSignatures
	}
	return false
}

func (x *CheckCommitsFromSubRepoResponse) GetRejectedFiles() []string {
	if x != nil {
		return x.RejectedFiles
	}
	return nil
}

type GetRepoSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRepoSyncRequest) Reset() {
	*x = GetRepoSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepoSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepoSyncRequest) ProtoMessage() {}

func (x *GetRepoSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepoSyncRequest.ProtoReflect.Descriptor instead.
func (*GetRepoSyncRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{16}
}

func (x *GetRepoSyncRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRepoSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoSync *RepoSync `protobuf:"bytes,1,opt,name=repo_sync,json=repoSync,proto3" json:"repo_sync,omitempty"`
	Secret   string    `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	SyncStat *SyncStat `protobuf:"bytes,3,opt,name=sync_stat,json=syncStat,proto3" json:"sync_stat,omitempty"`
}

func (x *GetRepoSyncResponse) Reset() {
	*x = GetRepoSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepoSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepoSyncResponse) ProtoMessage() {}

func (x *GetRepoSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepoSyncResponse.ProtoReflect.Descriptor instead.
func (*GetRepoSyncResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{17}
}

func (x *GetRepoSyncResponse) GetRepoSync() *RepoSync {
	if x != nil {
		return x.RepoSync
	}
	return nil
}

func (x *GetRepoSyncResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *GetRepoSyncResponse) GetSyncStat() *SyncStat {
	if x != nil {
		return x.SyncStat
	}
	return nil
}

var File_svc_proto protoreflect.FileDescriptor

var file_svc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x69, 0x74,
	0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x22, 0x5e, 0x0a, 0x11, 0x47, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x50, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x08, 0x52, 0x65,
	0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72,
	0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x06, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69,
	0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x9c, 0x03, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x64, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x44,
	0x66, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x64, 0x66, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x44, 0x66, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x54, 0x6f, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x6f,
	0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x2e, 0x54, 0x6f, 0x54, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x74, 0x6f, 0x54, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x1a, 0x3b, 0x0a, 0x0d,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x54, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x54, 0x6f, 0x54,
	0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x46,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x4e, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x56, 0x45,
	0x52, 0x47, 0x45, 0x44, 0x10, 0x04, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x7b,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x4f, 0x5f, 0x44, 0x49, 0x56, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x53,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x22, 0x82, 0x02, 0x0a, 0x13,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x36, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x47,
	0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x06, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x29, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x22, 0x3e, 0x0a, 0x14, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x22, 0x9c, 0x01, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x8a, 0x01, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x48, 0x65, 0x61, 0x64, 0x22, 0xd4, 0x01, 0x0a,
	0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x54, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x67, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x67,
	0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6f,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x6f, 0x50,
	0x75, 0x73, 0x68, 0x22, 0xf0, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67,
	0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69,
	0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0c, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x70, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61,
	0x73, 0x47, 0x70, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x4c,
	0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x54, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x67, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x67, 0x70,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x1f, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a,
	0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e,
	0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b,
	0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x74,
	0x6f, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x68,
	0x61, 0x73, 0x5f, 0x67, 0x70, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x47, 0x70, 0x67, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x32, 0xd4, 0x04, 0x0a,
	0x06, 0x47, 0x69, 0x54, 0x72, 0x69, 0x6d, 0x12, 0x53, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69,
	0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x2e,
	0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x6f, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x74,
	0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x15, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x54, 0x6f,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x55,
	0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x17, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x61, 0x72, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x72, 0x69,
	0x6d, 0x2f, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_proto_rawDescOnce sync.Once
	file_svc_proto_rawDescData = file_svc_proto_rawDesc
)

func file_svc_proto_rawDescGZIP() []byte {
	file_svc_proto_rawDescOnce.Do(func() {
		file_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_proto_rawDescData)
	})
	return file_svc_proto_rawDescData
}

var file_svc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_svc_proto_goTypes = []interface{}{
	(LastSyncCommitStatus_Enum)(0),          // 0: gitrim.svc.LastSyncCommitStatus.Enum
	(SubRepoCommitsCheck_Status)(0),         // 1: gitrim.svc.SubRepoCommitsCheck.Status
	(*GitRepoIdentifier)(nil),               // 2: gitrim.svc.GitRepoIdentifier
	(*Filter)(nil),                          // 3: gitrim.svc.Filter
	(*RepoSync)(nil),                        // 4: gitrim.svc.RepoSync
	(*SyncStat)(nil),                        // 5: gitrim.svc.SyncStat
	(*LastSyncCommitStatus)(nil),            // 6: gitrim.svc.LastSyncCommitStatus
	(*SubRepoCommitsCheck)(nil),             // 7: gitrim.svc.SubRepoCommitsCheck
	(*InitRepoSyncRequest)(nil),             // 8: gitrim.svc.InitRepoSyncRequest
	(*InitRepoSyncResponse)(nil),            // 9: gitrim.svc.InitRepoSyncResponse
	(*SyncToSubRepoRequest)(nil),            // 10: gitrim.svc.SyncToSubRepoRequest
	(*SyncToSubRepoResponse)(nil),           // 11: gitrim.svc.SyncToSubRepoResponse
	(*CommitsFromSubRepoRequest)(nil),       // 12: gitrim.svc.CommitsFromSubRepoRequest
	(*CommitsFromSubRepoResponse)(nil),      // 13: gitrim.svc.CommitsFromSubRepoResponse
	(*CheckRepoSyncUpToDateRequest)(nil),    // 14: gitrim.svc.CheckRepoSyncUpToDateRequest
	(*CheckRepoSyncUpToDateResponse)(nil),   // 15: gitrim.svc.CheckRepoSyncUpToDateResponse
	(*CheckCommitsFromSubRepoRequest)(nil),  // 16: gitrim.svc.CheckCommitsFromSubRepoRequest
	(*CheckCommitsFromSubRepoResponse)(nil), // 17: gitrim.svc.CheckCommitsFromSubRepoResponse
	(*GetRepoSyncRequest)(nil),              // 18: gitrim.svc.GetRepoSyncRequest
	(*GetRepoSyncResponse)(nil),             // 19: gitrim.svc.GetRepoSyncResponse
	nil,                                     // 20: gitrim.svc.SyncStat.FromToToEntry
	nil,                                     // 21: gitrim.svc.SyncStat.ToToFromEntry
}
var file_svc_proto_depIdxs = []int32{
	2,  // 0: gitrim.svc.RepoSync.from_repo:type_name -> gitrim.svc.GitRepoIdentifier
	2,  // 1: gitrim.svc.RepoSync.to_repo:type_name -> gitrim.svc.GitRepoIdentifier
	3,  // 2: gitrim.svc.RepoSync.filter:type_name -> gitrim.svc.Filter
	20, // 3: gitrim.svc.SyncStat.from_to_to:type_name -> gitrim.svc.SyncStat.FromToToEntry
	21, // 4: gitrim.svc.SyncStat.to_to_from:type_name -> gitrim.svc.SyncStat.ToToFromEntry
	2,  // 5: gitrim.svc.InitRepoSyncRequest.from_repo:type_name -> gitrim.svc.GitRepoIdentifier
	2,  // 6: gitrim.svc.InitRepoSyncRequest.to_repo:type_name -> gitrim.svc.GitRepoIdentifier
	1,  // 7: gitrim.svc.CommitsFromSubRepoResponse.result:type_name -> gitrim.svc.SubRepoCommitsCheck.Status
	0,  // 8: gitrim.svc.CommitsFromSubRepoResponse.from_repo_status:type_name -> gitrim.svc.LastSyncCommitStatus.Enum
	0,  // 9: gitrim.svc.CommitsFromSubRepoResponse.to_repo_status:type_name -> gitrim.svc.LastSyncCommitStatus.Enum
	0,  // 10: gitrim.svc.CheckRepoSyncUpToDateResponse.from_repo_status:type_name -> gitrim.svc.LastSyncCommitStatus.Enum
	0,  // 11: gitrim.svc.CheckRepoSyncUpToDateResponse.to_repo_status:type_name -> gitrim.svc.LastSyncCommitStatus.Enum
	1,  // 12: gitrim.svc.CheckCommitsFromSubRepoResponse.result:type_name -> gitrim.svc.SubRepoCommitsCheck.Status
	0,  // 13: gitrim.svc.CheckCommitsFromSubRepoResponse.from_repo_status:type_name -> gitrim.svc.LastSyncCommitStatus.Enum
	0,  // 14: gitrim.svc.CheckCommitsFromSubRepoResponse.to_repo_status:type_name -> gitrim.svc.LastSyncCommitStatus.Enum
	4,  // 15: gitrim.svc.GetRepoSyncResponse.repo_sync:type_name -> gitrim.svc.RepoSync
	5,  // 16: gitrim.svc.GetRepoSyncResponse.sync_stat:type_name -> gitrim.svc.SyncStat
	8,  // 17: gitrim.svc.GiTrim.InitRepoSync:input_type -> gitrim.svc.InitRepoSyncRequest
	10, // 18: gitrim.svc.GiTrim.SyncToSubRepo:input_type -> gitrim.svc.SyncToSubRepoRequest
	12, // 19: gitrim.svc.GiTrim.CommitsFromSubRepo:input_type -> gitrim.svc.CommitsFromSubRepoRequest
	14, // 20: gitrim.svc.GiTrim.CheckRepoSyncUpToDate:input_type -> gitrim.svc.CheckRepoSyncUpToDateRequest
	16, // 21: gitrim.svc.GiTrim.CheckCommitsFromSubRepo:input_type -> gitrim.svc.CheckCommitsFromSubRepoRequest
	18, // 22: gitrim.svc.GiTrim.GetRepoSync:input_type -> gitrim.svc.GetRepoSyncRequest
	9,  // 23: gitrim.svc.GiTrim.InitRepoSync:output_type -> gitrim.svc.InitRepoSyncResponse
	11, // 24: gitrim.svc.GiTrim.SyncToSubRepo:output_type -> gitrim.svc.SyncToSubRepoResponse
	13, // 25: gitrim.svc.GiTrim.CommitsFromSubRepo:output_type -> gitrim.svc.CommitsFromSubRepoResponse
	15, // 26: gitrim.svc.GiTrim.CheckRepoSyncUpToDate:output_type -> gitrim.svc.CheckRepoSyncUpToDateResponse
	17, // 27: gitrim.svc.GiTrim.CheckCommitsFromSubRepo:output_type -> gitrim.svc.CheckCommitsFromSubRepoResponse
	19, // 28: gitrim.svc.GiTrim.GetRepoSync:output_type -> gitrim.svc.GetRepoSyncResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_svc_proto_init() }
func file_svc_proto_init() {
	if File_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitRepoIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastSyncCommitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubRepoCommitsCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRepoSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRepoSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncToSubRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncToSubRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitsFromSubRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitsFromSubRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRepoSyncUpToDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRepoSyncUpToDateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitsFromSubRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitsFromSubRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepoSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepoSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_proto_goTypes,
		DependencyIndexes: file_svc_proto_depIdxs,
		EnumInfos:         file_svc_proto_enumTypes,
		MessageInfos:      file_svc_proto_msgTypes,
	}.Build()
	File_svc_proto = out.File
	file_svc_proto_rawDesc = nil
	file_svc_proto_goTypes = nil
	file_svc_proto_depIdxs = nil
}
