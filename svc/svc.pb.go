// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.9
// source: svc.proto

package svc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GitRepoIdentifier is a combination of [organization or user]/[repo-name] on a
// [remote_url], which uniquely identify a repo on a given server running git
// services, such as "user/repo" on "github.com".
type GitRepoIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteName string `protobuf:"bytes,1,opt,name=remote_name,json=remoteName,proto3" json:"remote_name,omitempty"`
	Owner      string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Repo       string `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *GitRepoIdentifier) Reset() {
	*x = GitRepoIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRepoIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRepoIdentifier) ProtoMessage() {}

func (x *GitRepoIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRepoIdentifier.ProtoReflect.Descriptor instead.
func (*GitRepoIdentifier) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{0}
}

func (x *GitRepoIdentifier) GetRemoteName() string {
	if x != nil {
		return x.RemoteName
	}
	return ""
}

func (x *GitRepoIdentifier) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GitRepoIdentifier) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

// Filter contains the filters for a given sync-ing operation. It contains the
// raw_text and the canonical_filters which removes the comments/whitespaces and
// unsupported filters from the raw_text and lexigraphically sorted into a list
// of strings. Filter is considered changed if and only if canonical_filters are
// changed.
// Changing filter means a new repo, and the whole history of the sub repo will
// need to be rebuilt.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// raw text of the filter.
	RawText string `protobuf:"bytes,1,opt,name=raw_text,json=rawText,proto3" json:"raw_text,omitempty"`
	// canonical_filters contained in the filter.
	CanonicalFilters []string `protobuf:"bytes,2,rep,name=canonical_filters,json=canonicalFilters,proto3" json:"canonical_filters,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{1}
}

func (x *Filter) GetRawText() string {
	if x != nil {
		return x.RawText
	}
	return ""
}

func (x *Filter) GetCanonicalFilters() []string {
	if x != nil {
		return x.CanonicalFilters
	}
	return nil
}

// RepoSync contains the information about sync-ing commits from a repo into a
// repo after files/trees are filtered by the provided filter.
//
// Each RepoSync contains an id, which is a hash of the two repos/branch.
type RepoSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the repo sync
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Repo of the original/unfiltered data
	FromRepo *GitRepoIdentifier `protobuf:"bytes,11,opt,name=from_repo,json=fromRepo,proto3" json:"from_repo,omitempty"`
	// Branch to sync data from.
	FromBranch string `protobuf:"bytes,12,opt,name=from_branch,json=fromBranch,proto3" json:"from_branch,omitempty"`
	// Repo of the filtered data.
	ToRepo *GitRepoIdentifier `protobuf:"bytes,21,opt,name=to_repo,json=toRepo,proto3" json:"to_repo,omitempty"`
	// Branch of the filtered data.
	ToBranch string `protobuf:"bytes,22,opt,name=to_branch,json=toBranch,proto3" json:"to_branch,omitempty"`
	// Filter for this sync
	Filter *Filter `protobuf:"bytes,31,opt,name=filter,proto3" json:"filter,omitempty"`
	// commits in the unfiltered repo that will be considered the root commits of
	// the new repo after filtering.
	//
	// Root commits are just commits without parent commits.
	// The filter process walk the commit graph from the head of the from_branch,
	// and if it sees those commits listed here, it will stop the walk and set the
	// generated/filtered commits to zero parents - so they will become root
	// commits in the filtered repo.
	RootCommits []string `protobuf:"bytes,41,rep,name=root_commits,json=rootCommits,proto3" json:"root_commits,omitempty"`
	// head commit when the repo sync was first created. This, together with the
	// root_commits, are useful when filters of the commits changed.
	InitHeadCommit     string `protobuf:"bytes,42,opt,name=init_head_commit,json=initHeadCommit,proto3" json:"init_head_commit,omitempty"`
	LastSyncFromCommit string `protobuf:"bytes,43,opt,name=last_sync_from_commit,json=lastSyncFromCommit,proto3" json:"last_sync_from_commit,omitempty"`
	LastSyncToCommit   string `protobuf:"bytes,44,opt,name=last_sync_to_commit,json=lastSyncToCommit,proto3" json:"last_sync_to_commit,omitempty"`
}

func (x *RepoSync) Reset() {
	*x = RepoSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoSync) ProtoMessage() {}

func (x *RepoSync) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoSync.ProtoReflect.Descriptor instead.
func (*RepoSync) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{2}
}

func (x *RepoSync) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RepoSync) GetFromRepo() *GitRepoIdentifier {
	if x != nil {
		return x.FromRepo
	}
	return nil
}

func (x *RepoSync) GetFromBranch() string {
	if x != nil {
		return x.FromBranch
	}
	return ""
}

func (x *RepoSync) GetToRepo() *GitRepoIdentifier {
	if x != nil {
		return x.ToRepo
	}
	return nil
}

func (x *RepoSync) GetToBranch() string {
	if x != nil {
		return x.ToBranch
	}
	return ""
}

func (x *RepoSync) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *RepoSync) GetRootCommits() []string {
	if x != nil {
		return x.RootCommits
	}
	return nil
}

func (x *RepoSync) GetInitHeadCommit() string {
	if x != nil {
		return x.InitHeadCommit
	}
	return ""
}

func (x *RepoSync) GetLastSyncFromCommit() string {
	if x != nil {
		return x.LastSyncFromCommit
	}
	return ""
}

func (x *RepoSync) GetLastSyncToCommit() string {
	if x != nil {
		return x.LastSyncToCommit
	}
	return ""
}

type PullRequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo       *GitRepoIdentifier `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Identifier string             `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *PullRequestInfo) Reset() {
	*x = PullRequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestInfo) ProtoMessage() {}

func (x *PullRequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestInfo.ProtoReflect.Descriptor instead.
func (*PullRequestInfo) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{3}
}

func (x *PullRequestInfo) GetRepo() *GitRepoIdentifier {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *PullRequestInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type InitRepoSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromRepo   *GitRepoIdentifier `protobuf:"bytes,11,opt,name=from_repo,json=fromRepo,proto3" json:"from_repo,omitempty"`
	FromBranch string             `protobuf:"bytes,12,opt,name=from_branch,json=fromBranch,proto3" json:"from_branch,omitempty"`
	ToRepo     *GitRepoIdentifier `protobuf:"bytes,21,opt,name=to_repo,json=toRepo,proto3" json:"to_repo,omitempty"`
	ToBranch   string             `protobuf:"bytes,22,opt,name=to_branch,json=toBranch,proto3" json:"to_branch,omitempty"`
	Filter     string             `protobuf:"bytes,31,opt,name=filter,proto3" json:"filter,omitempty"`
	// commits in the unfiltered repo that will be considered the root commits of
	// the new repo after filtering.
	//
	// Root commits are just commits without parent commits.
	// The filter process walk the commit graph from the head of the from_branch,
	// and if it sees those commits listed here, it will stop the walk and set the
	// generated/filtered commits to zero parents - so they will become root
	// commits in the filtered repo.
	RootCommits []string `protobuf:"bytes,41,rep,name=root_commits,json=rootCommits,proto3" json:"root_commits,omitempty"`
	// max depth from the head
	MaxDepth int64 `protobuf:"varint,42,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
}

func (x *InitRepoSyncRequest) Reset() {
	*x = InitRepoSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRepoSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRepoSyncRequest) ProtoMessage() {}

func (x *InitRepoSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRepoSyncRequest.ProtoReflect.Descriptor instead.
func (*InitRepoSyncRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{4}
}

func (x *InitRepoSyncRequest) GetFromRepo() *GitRepoIdentifier {
	if x != nil {
		return x.FromRepo
	}
	return nil
}

func (x *InitRepoSyncRequest) GetFromBranch() string {
	if x != nil {
		return x.FromBranch
	}
	return ""
}

func (x *InitRepoSyncRequest) GetToRepo() *GitRepoIdentifier {
	if x != nil {
		return x.ToRepo
	}
	return nil
}

func (x *InitRepoSyncRequest) GetToBranch() string {
	if x != nil {
		return x.ToBranch
	}
	return ""
}

func (x *InitRepoSyncRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *InitRepoSyncRequest) GetRootCommits() []string {
	if x != nil {
		return x.RootCommits
	}
	return nil
}

func (x *InitRepoSyncRequest) GetMaxDepth() int64 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

type InitRepoSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *InitRepoSyncResponse) Reset() {
	*x = InitRepoSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRepoSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRepoSyncResponse) ProtoMessage() {}

func (x *InitRepoSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRepoSyncResponse.ProtoReflect.Descriptor instead.
func (*InitRepoSyncResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{5}
}

func (x *InitRepoSyncResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InitRepoSyncResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type SyncToSubRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Force bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *SyncToSubRepoRequest) Reset() {
	*x = SyncToSubRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncToSubRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncToSubRepoRequest) ProtoMessage() {}

func (x *SyncToSubRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncToSubRepoRequest.ProtoReflect.Descriptor instead.
func (*SyncToSubRepoRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{6}
}

func (x *SyncToSubRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SyncToSubRepoRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type SyncToSubRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncToSubRepoResponse) Reset() {
	*x = SyncToSubRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncToSubRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncToSubRepoResponse) ProtoMessage() {}

func (x *SyncToSubRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncToSubRepoResponse.ProtoReflect.Descriptor instead.
func (*SyncToSubRepoResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{7}
}

type CommitFromSubRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitFromSubRepoRequest) Reset() {
	*x = CommitFromSubRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitFromSubRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitFromSubRepoRequest) ProtoMessage() {}

func (x *CommitFromSubRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitFromSubRepoRequest.ProtoReflect.Descriptor instead.
func (*CommitFromSubRepoRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{8}
}

type CommitFromSubRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitFromSubRepoResponse) Reset() {
	*x = CommitFromSubRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitFromSubRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitFromSubRepoResponse) ProtoMessage() {}

func (x *CommitFromSubRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitFromSubRepoResponse.ProtoReflect.Descriptor instead.
func (*CommitFromSubRepoResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{9}
}

type CheckCommitFromSubRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckCommitFromSubRepoRequest) Reset() {
	*x = CheckCommitFromSubRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitFromSubRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitFromSubRepoRequest) ProtoMessage() {}

func (x *CheckCommitFromSubRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitFromSubRepoRequest.ProtoReflect.Descriptor instead.
func (*CheckCommitFromSubRepoRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{10}
}

type CheckCommitFromSubRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckCommitFromSubRepoResponse) Reset() {
	*x = CheckCommitFromSubRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitFromSubRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitFromSubRepoResponse) ProtoMessage() {}

func (x *CheckCommitFromSubRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitFromSubRepoResponse.ProtoReflect.Descriptor instead.
func (*CheckCommitFromSubRepoResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{11}
}

type GetRepoSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRepoSyncRequest) Reset() {
	*x = GetRepoSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepoSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepoSyncRequest) ProtoMessage() {}

func (x *GetRepoSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepoSyncRequest.ProtoReflect.Descriptor instead.
func (*GetRepoSyncRequest) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{12}
}

func (x *GetRepoSyncRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRepoSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoSync *RepoSync `protobuf:"bytes,1,opt,name=repo_sync,json=repoSync,proto3" json:"repo_sync,omitempty"`
	Secret   string    `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *GetRepoSyncResponse) Reset() {
	*x = GetRepoSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepoSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepoSyncResponse) ProtoMessage() {}

func (x *GetRepoSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepoSyncResponse.ProtoReflect.Descriptor instead.
func (*GetRepoSyncResponse) Descriptor() ([]byte, []int) {
	return file_svc_proto_rawDescGZIP(), []int{13}
}

func (x *GetRepoSyncResponse) GetRepoSync() *RepoSync {
	if x != nil {
		return x.RepoSync
	}
	return nil
}

func (x *GetRepoSyncResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

var File_svc_proto protoreflect.FileDescriptor

var file_svc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x69, 0x74,
	0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x22, 0x5e, 0x0a, 0x11, 0x47, 0x69, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x50, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x08, 0x52, 0x65,
	0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72,
	0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x06, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69,
	0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x48, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x22, 0x64, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x36,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x69, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06,
	0x74, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0x3e, 0x0a, 0x14, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x3c, 0x0a, 0x14, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x79, 0x6e,
	0x63, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b,
	0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x32, 0xde, 0x03, 0x0a, 0x06, 0x47, 0x69, 0x54, 0x72, 0x69,
	0x6d, 0x12, 0x53, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f,
	0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x72,
	0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x53, 0x75, 0x62,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x72,
	0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x29, 0x2e, 0x67,
	0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x72, 0x69, 0x6d, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x61, 0x72, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x67,
	0x69, 0x74, 0x72, 0x69, 0x6d, 0x2f, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_svc_proto_rawDescOnce sync.Once
	file_svc_proto_rawDescData = file_svc_proto_rawDesc
)

func file_svc_proto_rawDescGZIP() []byte {
	file_svc_proto_rawDescOnce.Do(func() {
		file_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_proto_rawDescData)
	})
	return file_svc_proto_rawDescData
}

var file_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_svc_proto_goTypes = []interface{}{
	(*GitRepoIdentifier)(nil),              // 0: gitrim.svc.GitRepoIdentifier
	(*Filter)(nil),                         // 1: gitrim.svc.Filter
	(*RepoSync)(nil),                       // 2: gitrim.svc.RepoSync
	(*PullRequestInfo)(nil),                // 3: gitrim.svc.PullRequestInfo
	(*InitRepoSyncRequest)(nil),            // 4: gitrim.svc.InitRepoSyncRequest
	(*InitRepoSyncResponse)(nil),           // 5: gitrim.svc.InitRepoSyncResponse
	(*SyncToSubRepoRequest)(nil),           // 6: gitrim.svc.SyncToSubRepoRequest
	(*SyncToSubRepoResponse)(nil),          // 7: gitrim.svc.SyncToSubRepoResponse
	(*CommitFromSubRepoRequest)(nil),       // 8: gitrim.svc.CommitFromSubRepoRequest
	(*CommitFromSubRepoResponse)(nil),      // 9: gitrim.svc.CommitFromSubRepoResponse
	(*CheckCommitFromSubRepoRequest)(nil),  // 10: gitrim.svc.CheckCommitFromSubRepoRequest
	(*CheckCommitFromSubRepoResponse)(nil), // 11: gitrim.svc.CheckCommitFromSubRepoResponse
	(*GetRepoSyncRequest)(nil),             // 12: gitrim.svc.GetRepoSyncRequest
	(*GetRepoSyncResponse)(nil),            // 13: gitrim.svc.GetRepoSyncResponse
}
var file_svc_proto_depIdxs = []int32{
	0,  // 0: gitrim.svc.RepoSync.from_repo:type_name -> gitrim.svc.GitRepoIdentifier
	0,  // 1: gitrim.svc.RepoSync.to_repo:type_name -> gitrim.svc.GitRepoIdentifier
	1,  // 2: gitrim.svc.RepoSync.filter:type_name -> gitrim.svc.Filter
	0,  // 3: gitrim.svc.PullRequestInfo.repo:type_name -> gitrim.svc.GitRepoIdentifier
	0,  // 4: gitrim.svc.InitRepoSyncRequest.from_repo:type_name -> gitrim.svc.GitRepoIdentifier
	0,  // 5: gitrim.svc.InitRepoSyncRequest.to_repo:type_name -> gitrim.svc.GitRepoIdentifier
	2,  // 6: gitrim.svc.GetRepoSyncResponse.repo_sync:type_name -> gitrim.svc.RepoSync
	4,  // 7: gitrim.svc.GiTrim.InitRepoSync:input_type -> gitrim.svc.InitRepoSyncRequest
	6,  // 8: gitrim.svc.GiTrim.SyncToSubRepo:input_type -> gitrim.svc.SyncToSubRepoRequest
	8,  // 9: gitrim.svc.GiTrim.CommitFromSubRepo:input_type -> gitrim.svc.CommitFromSubRepoRequest
	10, // 10: gitrim.svc.GiTrim.CheckCommitFromSubRepo:input_type -> gitrim.svc.CheckCommitFromSubRepoRequest
	12, // 11: gitrim.svc.GiTrim.GetRepoSync:input_type -> gitrim.svc.GetRepoSyncRequest
	5,  // 12: gitrim.svc.GiTrim.InitRepoSync:output_type -> gitrim.svc.InitRepoSyncResponse
	7,  // 13: gitrim.svc.GiTrim.SyncToSubRepo:output_type -> gitrim.svc.SyncToSubRepoResponse
	9,  // 14: gitrim.svc.GiTrim.CommitFromSubRepo:output_type -> gitrim.svc.CommitFromSubRepoResponse
	11, // 15: gitrim.svc.GiTrim.CheckCommitFromSubRepo:output_type -> gitrim.svc.CheckCommitFromSubRepoResponse
	13, // 16: gitrim.svc.GiTrim.GetRepoSync:output_type -> gitrim.svc.GetRepoSyncResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_svc_proto_init() }
func file_svc_proto_init() {
	if File_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitRepoIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRepoSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRepoSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncToSubRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncToSubRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitFromSubRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitFromSubRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitFromSubRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitFromSubRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepoSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepoSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_proto_goTypes,
		DependencyIndexes: file_svc_proto_depIdxs,
		MessageInfos:      file_svc_proto_msgTypes,
	}.Build()
	File_svc_proto = out.File
	file_svc_proto_rawDesc = nil
	file_svc_proto_goTypes = nil
	file_svc_proto_depIdxs = nil
}
